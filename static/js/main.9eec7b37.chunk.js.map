{"version":3,"sources":["types.js","rootReducer.js","reducers/correctionsReducer.js","components/StyledComponents.js","api.js","components/actions.js","components/HomePageTemp.js","App.js","serviceWorker.js","index.js"],"names":["FETCH_CORRECTIONS_FOR_SENTENCES_INIT","FETCH_CORRECTIONS_FOR_SENTENCES_SUCCESS","FETCH_CORRECTIONS_FOR_SENTENCES_ERROR","combineReducers","correctionsReducer","state","arguments","length","undefined","action","type","Object","objectSpread","status","data","error","Title","styled","span","_templateObject","LoadingAnimation","div","_templateObject2","Input","input","_templateObject3","Button","button","_templateObject4","post","requestPath","requestBody","axios","REQUEST_URL","loadCorrectionsForSentence","request","dispatch","then","response","catch","fetchCorrectionsError","PrettyPrintJson","props","react_default","a","createElement","className","role","style","marginTop","JSON","stringify","ValidationError","HomePageTemp","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onInputValueChange","e","setState","inputSentence","target","value","onSubmit","preventDefault","checkGrammar","validateInput","showValidationError","getRequestBody","sentence","useBeamSearch","searchType","setSearchType","validInputPattern","RegExp","validateExtraSpaces","splitSentence","match","test","bind","assertThisInitialized","requestingCorrections","nextProps","_this$state","initState","correctionData","HomePageTemp_ValidationError","placeholder","onChange","disabled","textAlign","padding","htmlFor","id","name","defaultChecked","paddingLeft","onClick","paddingTop","HomePageTemp_PrettyPrintJson","React","Component","defaultProps","results","homePageTemp","connect","ownProps","App","_ref","location","react_router","path","exact","component","Boolean","window","hostname","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","Thunk","ReactDOM","render","react_router_dom","react_redux_es","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9eec7b37.chunk.js","sourcesContent":["export const FETCH_CORRECTIONS_FOR_SENTENCES_INIT =\n    'FETCH_CORRECTIONS_FOR_SENTENCES_INIT';\nexport const FETCH_CORRECTIONS_FOR_SENTENCES_SUCCESS =\n    'FETCH_CORRECTIONS_FOR_SENTENCES_SUCCESS';\nexport const FETCH_CORRECTIONS_FOR_SENTENCES_ERROR =\n    'FETCH_CORRECTIONS_FOR_SENTENCES_ERROR';\n","import { combineReducers } from 'redux';\nimport correctionsReducer from './reducers/correctionsReducer';\n\nexport default combineReducers({\n    correctionsReducer\n});\n","import {\n    FETCH_CORRECTIONS_FOR_SENTENCES_INIT,\n    FETCH_CORRECTIONS_FOR_SENTENCES_SUCCESS,\n    FETCH_CORRECTIONS_FOR_SENTENCES_ERROR\n} from '../types';\n\nexport default function correctionsReducer(state = {}, action = {}) {\n    switch (action.type) {\n    case FETCH_CORRECTIONS_FOR_SENTENCES_INIT:\n        return { ...state, status: 'LOADING' };\n    case FETCH_CORRECTIONS_FOR_SENTENCES_SUCCESS:\n        return { ...state, data: action.data, status: 'SUCCESS' };\n    case FETCH_CORRECTIONS_FOR_SENTENCES_ERROR:\n        return { ...state, error: action.error, status: 'ERROR' };\n    default:\n        return state;\n    }\n}\n","import styled from 'styled-components';\n\nexport const Title = styled.span`\n    display: block;\n    font-family: Poppins-Bold;\n    font-size: 30px;\n    color: #333333;\n    line-height: 1.2;\n    text-align: center;\n`;\n\nexport const LoadingAnimation = styled.div`\n    display: inline-block;\n    width: 46px;\n    height: 46px;\n    &:after {\n        content: ' ';\n        display: block;\n        width: 46px;\n        height: 46px;\n        border-radius: 50%;\n        border: 5px solid #58b846;\n        border-color: #58b846 transparent #58b846 transparent;\n        animation: lds-dual-ring 1.2s linear infinite;\n    }\n    @keyframes lds-dual-ring {\n        0% {\n            transform: rotate(0deg);\n        }\n        100% {\n            transform: rotate(360deg);\n        }\n    }\n`;\n\nexport const Input = styled.input`\n    padding: 0.5em 0.6em;\n    display: inline-block;\n    border: 1px solid #ccc;\n    box-shadow: inset 0 1px 3px #ddd;\n    border-radius: 4px;\n    vertical-align: middle;\n    box-sizing: border-box;\n    width: 100%;\n    text-align: center;\n    &:focus {\n        outline: none;\n        box-shadow: 0 0 0 2px rgba(68, 68, 68, 0.137);\n    }\n`;\n\nexport const Button = styled.button`\n    display: block;\n    width: 200px;\n    margin: 0px auto 0;\n    padding: 10px;\n    border: none;\n    border-radius: 25px;\n    color: #fff;\n    background-color: #58b846;\n    font: 15px Poppins-Medium;\n    line-height: 1.2;\n    text-transform: uppercase;\n    letter-spacing: 1px;\n    appearance: none;\n    cursor: pointer;\n    transition: all 0.4s;\n    &:hover {\n        box-shadow: 0 0.5em 0.5em -0.4em #8fc866;\n        transform: translateY(-0.25em);\n    }\n    &:focus {\n        outline: none;\n        box-shadow: 0 0 0 2px rgba(68, 68, 68, 0.137);\n    }\n    &:disabled {\n        background-color: #ccc;\n        &:hover {\n            box-shadow: none\n            transform: none\n        }\n    }\n`;\n","import axios from 'axios';\n\n// const BASE_URL = 'http://127.0.0.1:5000';\nconst BASE_URL = 'http://35.200.222.127';\n\nexport const post = (requestPath, requestBody) =>\n    axios.post(BASE_URL + requestPath, requestBody);\n\nexport const get = requestPath => axios.get(requestPath);\n","import {\n    FETCH_CORRECTIONS_FOR_SENTENCES_INIT,\n    FETCH_CORRECTIONS_FOR_SENTENCES_SUCCESS,\n    FETCH_CORRECTIONS_FOR_SENTENCES_ERROR\n} from '../types';\nimport { post } from '../api';\n\nconst REQUEST_URL = '/correct';\n\nexport function fetchCorrectionsInit() {\n    return {\n        type: FETCH_CORRECTIONS_FOR_SENTENCES_INIT\n    };\n}\n\nexport function fetchCorrectionsSuccess(data) {\n    return {\n        type: FETCH_CORRECTIONS_FOR_SENTENCES_SUCCESS,\n        data\n    };\n}\n\nexport function fetchCorrectionsError(error) {\n    return {\n        type: FETCH_CORRECTIONS_FOR_SENTENCES_ERROR,\n        error\n    };\n}\n\nexport function loadCorrectionsForSentence(request) {\n    // eslint-disable-next-line func-names\n    return function(dispatch) {\n        dispatch(fetchCorrectionsInit());\n        return post(REQUEST_URL, request)\n            .then(response => {\n                dispatch(fetchCorrectionsSuccess(response.data));\n            })\n            .catch(error => {\n                dispatch(fetchCorrectionsError(error.response));\n            });\n    };\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { Title, Input, Button, LoadingAnimation } from './StyledComponents';\n\nimport { loadCorrectionsForSentence } from './actions';\n\nconst PrettyPrintJson = props => (\n    <div\n        className=\"alert alert-success\"\n        role=\"alert\"\n        style={{ marginTop: '30px' }}\n    >\n        <pre>{JSON.stringify(props.data, null, 2)}</pre>\n    </div>\n);\n\nconst ValidationError = () => (\n    <div className=\"alert alert-danger m-b-26\" role=\"alert\">\n        <h4 className=\"alert-heading m-b-8\">Unsupported Input Format</h4>\n        <p>\n            Please note that only sentences with following characteristics are\n            supported by the system currently.\n            <ul className=\"m-l-10\">\n                <li>\n                    - Should contain only sinhala unicode characters and ends\n                    with a fullstop.\n                </li>\n                <li>\n                    - Numbers and other punctuation marks are not supported yet.\n                </li>\n                <li>- No additional white spaces are supported.</li>\n                <li>\n                    - Only Sentence within word limit 3-7 are currently\n                    supported.\n                </li>\n            </ul>\n        </p>\n        <hr />\n        <p className=\"mb-0\">E.g: ක්‍රීඩකයා ඉතා වේගයෙන් දිව්වේය.</p>\n    </div>\n);\n\nclass HomePageTemp extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onInputValueChange = this.onInputValueChange.bind(this);\n        this.setSearchType = this.setSearchType.bind(this);\n        this.getRequestBody = this.getRequestBody.bind(this);\n        this.state = {\n            inputSentence: '',\n            searchType: 'greedy',\n            requestingCorrections: false,\n            showValidationError: false\n        };\n    }\n\n    componentWillReceiveProps(nextProps) {\n        // You don't have to do this check first, but it can help prevent an unneeded render\n        if (\n            nextProps.requestingCorrections !== this.state.requestingCorrections\n        ) {\n            this.setState({\n                requestingCorrections: nextProps.requestingCorrections\n            });\n        }\n    }\n\n    onInputValueChange = e => {\n        this.setState({\n            inputSentence: e.target.value\n        });\n    };\n\n    onSubmit = e => {\n        e.preventDefault();\n        const { checkGrammar } = this.props;\n\n        if (this.validateInput(this.state.inputSentence)) {\n            this.setState({ showValidationError: false });\n            const requestBody = this.getRequestBody();\n            checkGrammar(requestBody);\n        } else {\n            this.setState({ showValidationError: true });\n        }\n    };\n\n    getRequestBody = () => ({\n        sentence: this.state.inputSentence,\n        useBeamSearch: this.state.searchType === 'beem'\n    });\n\n    setSearchType = e => {\n        this.setState({\n            searchType: e.target.value\n        });\n    };\n\n    validateInput = input => {\n        const validInputPattern = new RegExp('[^\\u0D80-\\u0DFF.\\u200d ]');\n        const validateExtraSpaces = new RegExp('( +[.!?])');\n        const splitSentence = input.match(/\\S+/g) || [];\n        return (\n            !validInputPattern.test(input) &&\n            !validateExtraSpaces.test(input) &&\n            splitSentence.length >= 3 &&\n            splitSentence.length <= 7\n        );\n    };\n\n    render() {\n        const {\n            searchType,\n            requestingCorrections,\n            showValidationError\n        } = this.state;\n        const { initState } = this.props;\n\n        let correctionData = {};\n\n        if (initState === 'SUCCESS') {\n            correctionData = this.props.correctionData;\n        }\n\n        return (\n            <div className=\"container-login100\">\n                <div className=\"wrap-login100\">\n                    <form className=\"login100-form validate-form\">\n                        <Title className=\"p-b-26\">\n                            Sinhala Grammar Tool Beta\n                        </Title>\n                        {showValidationError && <ValidationError />}\n                        <div>\n                            <div>\n                                <Input\n                                    placeholder=\"Enter the sentence here...\"\n                                    onChange={this.onInputValueChange}\n                                    disabled={requestingCorrections}\n                                />\n                                <div\n                                    style={{\n                                        textAlign: 'center',\n                                        padding: '20px'\n                                    }}\n                                >\n                                    <label\n                                        htmlFor=\"greedyButton\"\n                                        className=\"radio-inline\"\n                                    >\n                                        <input\n                                            id=\"greedyButton\"\n                                            value=\"greedy\"\n                                            type=\"radio\"\n                                            name=\"optradio\"\n                                            onChange={this.setSearchType}\n                                            defaultChecked={\n                                                searchType === 'greedy'\n                                            }\n                                            disabled={requestingCorrections}\n                                        />\n                                        Use Greedy Search\n                                    </label>\n                                    <label\n                                        htmlFor=\"beemButton\"\n                                        className=\"radio-inline\"\n                                        style={{\n                                            paddingLeft: '10px'\n                                        }}\n                                    >\n                                        <input\n                                            id=\"beemButton\"\n                                            value=\"beem\"\n                                            type=\"radio\"\n                                            name=\"optradio\"\n                                            onChange={this.setSearchType}\n                                            defaultChecked={\n                                                searchType === 'beem'\n                                            }\n                                            disabled={requestingCorrections}\n                                        />\n                                        Use Beam Search\n                                    </label>\n                                </div>\n                            </div>\n                            {initState !== 'LOADING' && (\n                                <Button\n                                    onClick={this.onSubmit}\n                                    disabled={requestingCorrections}\n                                >\n                                    Check Grammar\n                                </Button>\n                            )}\n                            {initState === 'LOADING' && (\n                                <div\n                                    style={{\n                                        textAlign: 'center',\n                                        paddingTop: '20px'\n                                    }}\n                                >\n                                    <LoadingAnimation />\n                                </div>\n                            )}\n                            {initState === 'SUCCESS' && (\n                                <PrettyPrintJson data={correctionData} />\n                            )}\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nHomePageTemp.propTypes = {\n    checkGrammar: PropTypes.func.isRequired,\n    initState: PropTypes.string.isRequired,\n    correctionData: PropTypes.shape({\n        results: PropTypes.array.isRequired,\n        useBeamSearch: PropTypes.bool.isRequired\n    }).isRequired,\n    requestingCorrections: PropTypes.bool.isRequired\n};\n\nHomePageTemp.defaultProps = {\n    correctionData: {\n        results: [],\n        useBeamSearch: false\n    }\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    initState: (state.correctionsReducer || {}).status || '',\n    correctionData: state.correctionsReducer.data,\n    error: state.correctionsReducer.error,\n    requestingCorrections: (state.correctionsReducer || {}).status === 'LOADING'\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    checkGrammar: request => dispatch(loadCorrectionsForSentence(request))\n});\n\nconst homePageTemp = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(HomePageTemp);\n\nexport default homePageTemp;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\n// import HomePage from './components/HomePage';\nimport HomePageTemp from './components/HomePageTemp';\n\nconst App = ({ location }) => (\n    <div className=\"limiter\">\n        {/* <Route location={location} path=\"/\" exact component={HomePage} /> */}\n        <Route location={location} path=\"/\" exact component={HomePageTemp} />\n    </div>\n);\n\nApp.propTypes = {\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired\n    }).isRequired\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport Thunk from 'redux-thunk';\n\nimport rootReducer from './rootReducer';\n\nimport './static/css/util.css';\nimport './static/css/index.css';\nimport './static/css/custom.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(\n    rootReducer,\n    composeWithDevTools(applyMiddleware(Thunk))\n);\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <Route component={App} />\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}